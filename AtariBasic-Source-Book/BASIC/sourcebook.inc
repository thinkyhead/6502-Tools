;
; Aliases to support older defines used
; in the "Atari BASIC Source Book."
;
; added 2025-10-10 by @thinkyhead
;
.define EQU	=

SCRY		=	$54	; SCREEN Y BYTE
SCRX		=	$55	; SCREEN X WORD

LOMEM		=	$80	; pointer to BASIC's low memory
ARGOPS		=	$80	; ARGUMENT/OPERATOR STACK
ARGSTK		=	$80
OUTBUFF		=	$80	; SYNTAX OUTPUT BUFFER

VNTP		=	$82	; start of variable name table

				; EXPANDED BUFFERS > > > >

VNTD		=	$84	; end of variable name table
VVTP		=	$86	; start of variable value table
STMTAB		=	$88	; start of the statement table
STMCUR		=	$8A	; current statement pointer
STARP		=	$8C	; strings/arrays pointer
ENDSTAR		=	$8E	; END STRING/ARRAY SPACE
TOPRSTK		=	$90	; TOP OF RUN STACK

				; < < < < EXPANDED BUFFERS

ENDVVT		=	$88	; END VARIABLE VALUE TABLE
RUNSTK		=	$8E	; runtime stack
MEMTOP		=	$90	; memtop

MEOLFLG		=	$92	; MODIFIED EOL FLAG
COX		=	$94	; CURRENT OUTPUT INDEX

POKADR		=	$95	; address of last POKE location
SRCADR		=	$95	; SEARCH ADDRESS

INDEX2		=	$97	; ARRAY INDEX 2
SVESA		=	$97	; SAVE EXPAND START ADR

MVFA		=	$99	; MOVE FROM ADR
MVTA		=	$9B	; MOVE TO ADR

CPC		=	$9D	; CUR SYNTAX PGM COUNTER
WVVTPT		=	$9D	; WORKING VAR TABLE PTR VALUE

MAXCIX		=	$9F	; MAX SYNTAX CIX
LLNGTH		=	$9F	; LINE LENGTH

TSLNUM		=	$A0	; TEST LINE NO
MVLNG		=	$A2	; MOVE LENGTH
ECSIZE		=	$A4	; MOVE SIZE

DIRFLG		=	$A6	; DIRECT EXECUTE FLAG

STMLBD		=	$A7	; STMT LENGTH BYTE DISPL
NXTSTD		=	$A7	; NEXT STMT DISPL

STMSTRT		=	$A8	; STMT START CIX
STINDEX		=	$A8	; CURR STMT INDEX

STKLVL		=	$A9	; SYNTAX STACK LEVEL
IBUFFX		=	$A9	; INPUT BUFFER INDEX
OPSTKX		=	$A9	; OPERATOR STACK INDEX

ARSLVL		=	$AA	; ARG STACK LEVEL
SRCSKP		=	$AA	; SEARCH SKIP FACTOR
ARSTKX		=	$AA	; ARG STACK INDEX

TSCOX		=	$AB	; TSCOW LENGTH BYTE PTR
EXSVOP		=	$AB	; SAVED OPERATOR

TVSCIX		=	$AC	; SAVE CIX FOR TVAT
EXSVPR		=	$AC	; SAVED OPERATOR PRECEDENCE

SVVNTP		=	$AD	; SAVE VAR NAME TBL PTR
LELNUM		=	$AD	; LIST END LINE #

ATEMP		=	$AF	; TEMP FOR ARRAYS
STENUM		=	$AF	; SEARCH TABLE ENTRY NUMBER
SCANT		=	$AF	; LIST SCAN COUNTER

SVONTC		=	$B0	; SAVE ONT SRC CODE
COMCNT		=	$B0	; COMMA COUNT FOR EXEXOR

SVVVTE		=	$B1	; SAVE VAR VALUE EXP SIZE
ADFLAG		=	$B1	; ASSIGN/DIM FLAG

SVONTL		=	$B2	; SAVE ONT SRC ARG LEN
SVDISP		=	$B2	; DISPL INTO LINE OF FOR/GOSUB TOKEN

ONLOOP		=	$B3	; LOOP CONTROL FOR OP
SVONTX		=	$B3	; SAVE ONT SRC INDEX
SAVDEX		=	$B3	; SAVE INDEX INTO STMT

ENTDTD		=	$B4	; ENTER DEVICE TBL
LISTDTD		=	$B5	; LIST DEVICE TBL
DATAD		=	$B6	; data element being read
DATALN		=	$B7	; data statement line number
ERRNUM		=	$B9	; ERROR #
STOPLN		=	$BA	; line where the program was stopped
TRAPLN		=	$BC	; TRAP LINE # [FOR ERROR]
SAVCUR		=	$BE	; SAVE CURRENT LINE ADDR
IOCMD		=	$C0	; I/O COMMAND
IODVC		=	$C1	; I/O DEVICE
PROMPT		=	$C2	; PROMPT CHAR
ERRSAV		=	$C3	; ERROR # FOR USER
TEMPA		=	$C4	; TEMP ADDR CELL
ZTEMP2		=	$C6	; TEMP
COLOR		=	$C8	; SET COLOR FOR BASE
PTABW		=	$C9	; number of columns between tab stops
LOADFLG		=	$CA	; load in progress flag
SQRCNT		=	$EF	; ##rev2## 1-byte polynomial degree PLYCNT (aka ESIGN)
SGNFLG		=	$F0	; ##rev2## 1-byte sign flag
XFMFLG		=	$F1	; ##rev2## 1-byte transform flag

ZTEMP1		=	$F5	; TEMP
ZTEMP4		=	$F7	; TEMP
ZTEMP3		=	$F9	; TEMP

RADFLG		=	$FB	; RADIANS UNITS
DEGFLG		=	$FB
RADON		=	0	;INDICATES RADIANS
DEGON		=	6	;INDICATES DEGREES

; Variable description
; Used with offsets EVSADR, EVSLEN, EVSDIM that overwrite FR0.

TVTYPE		=	$D2	; VARIABLE TYPE
VTYPE		=	$D2	; VARIABLE TYPE
TVNUM		=	$D3	; VARIABLE NUMBER
VNUM		=	$D3	; VARIABLE NUMBER
				; FR0 = $D4
VTYPE1		=	$DE

FLPTR		=	$FC	;2-byte floating point number pointer
FPTR2		=	$FE	;2-byte floating point number pointer

EPCHAR		=	']'	; $5D
CR		EQU	$9B	; Atari CR 155

; Miscellaneous Non-Zero Page RAM
; TODO: Reserve with DS equivalent

;	ORG	MISCR1
SIX		=	$480
SOX		=	$481
SPC		=	$482

;	ORG	STACK+254
LPBR1		=	$57E	; LBUFF PREFIX 1
LPBR2		=	$57F	; LBUFF PREFIX 2

;	ORG	LBUFF+$60
PLYARG		=	$5E0	; DS FPREC
FPSCR		=	$5E6	; DS FPREC
FPSCR1		=	$5EC	; DS FPREC
FSCR		EQU	FPSCR
FSCR1		EQU	FPSCR1

; Floating Point Miscellaneous Equates

FPREC   = 6             ;precision
FMPREC  = FPREC-1       ;##rev2## length of mantissa

; Floating Point OS Equates
INTLBF		EQU	$DA51
TSTNUM		EQU	$DBAF
NORM		EQU	$DC00
FST0R		EQU	FSTOR
XFORM		EQU	$DE95
FHALF		EQU	$DF6C
ATCOEF		EQU	$DFAE	; 0.001605444900
FP9S		EQU	$DFEA	; 0.999999999999
PIOV4		EQU	$DFF0	; PI/4 = ARCTAN[1.0]
NATCF		EQU	(PIOV4-ATCOEF)/FPREC

; Clear the rest of FP0
ZXLY		EQU	ZFR0 + 4

; Aliases for Old Symbols from Original BASIC Source Book
MV0TO1		EQU	FMOVE
SKBLANK		EQU	SKIP_SPACES
SKPBLANK	EQU	SKBLANK
SKBLANKS	EQU	SKBLANK
BININT		EQU	FR0
FR0M		EQU	FR0+1
FR1M		EQU	FR1+1
CVIFP		EQU	IFP
CVAFP		EQU	AFP
CVFASC		EQU	FASC
GRFBAS		EQU	PADDL0
RNDLOC		EQU	RANDOM
CREGS		EQU	COLOR0
SREG1		EQU	AUDCTL
SREG2		EQU	AUDF1
SREG3		EQU	AUDC1
SVCOLOR		EQU	ATACHR
ZICB		EQU	ZIOCB
ICAUX1		EQU	ICAX1
ICAUX2		EQU	ICAX2
ICAUX3		EQU	ICAX3
ICAUX4		EQU	ICAX4
ICAUX5		EQU	ICAX5
ICPUT		EQU	ICPTL
MISCRAM		EQU	$0500
ICSBRK		EQU	$80
BRKBYT		EQU	BRKKEY
APMH		EQU	APPMHI
CIO		EQU	CIOV		; <Source Book>
LMADR		EQU	MEMLO

; Equates for Variables
EVTYPE		=	0	; VALUE TYPE CODE
EVSTR		=	$80	; - STRING
EVARRAY		=	$40	; - ARRAY
EVSDTA		=	$02	; - ON IF EVSADR IS ABS ADR
EVDIM		=	$01	; ON IF HAS BEEN DIM
EVSCALER	=	$00	; - SCALER

EVNUM		=	1	; VARIABLE NUMBER [83 - FF]
EVVALUE		=	2	; SCALAR VALUE [6 BYTES]

EVSADR		=	2	; STRING DISPL [2]
EVSLEN		=	4	; STRING LENGTH [2]
EVSDIM		=	6	; STRING DIM [2]

EVAADR		=	2	; ARRAY DISPL [2]
EVAD1		=	4	; ARRAY DIM 1 [2]
EVAD2		=	6	; ARRAY DIM 2 [2]

; Equates for Run Stack
GFHEAD		=	4	; LENGTH OF HEADER FOR FOR/GOSUB
FBODY		=	12	; LENGTH OF BODY OF FOR ELEMENT
GFDISP		=	3	; DISP TO SAVED LINE DISP
GFLNO		=	1	; DISPL TO LINE # IN HEADER
GFTYPE		=	0	; DISPL TO TYPE IN HEADER
FSTEP		=	6	; DISPL TO STEP IN FOR ELEMENT
FLIM		=	0	; DISPL TO LIMIT IN FOR ELEMENT

; I/O Commands

ICOIN		=	$01
ICOOUT		=	$02
ICOIO		=	$03
ICGBR		=	$04
ICGTR		=	$05
ICGBC		=	$06
ICGTC		=	$07
ICPBR		=	$08
ICPTR		=	$09
ICPBC		=	$0A
ICPTC		=	$0B
ICCLOSE		=	$0C
ICSTAT		=	$0D
ICDDC		=	$0E
ICMAX		=	$0E
ICFREE		=	$FF
ICGR		=	$1C
ICDRAW		=	$11

; I/O Errors

EOFERR		=	$88	;END OF FILE

; DOS IOCB command codes

POINT		=	$25	;point sector
NOTE		=	$26	;note sector
